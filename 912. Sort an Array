class Solution {
    void conquer(int[] nums, int low, int mid, int high){
        List<Integer> result = new ArrayList<>();
        int left = low;
        int right = mid+1;
        while(left <= mid && right <= high){
            if(nums[left] <= nums[right]){
                result.add(nums[left]);
                left++;
            }
            else{
                result.add(nums[right]);
                right++;
            }
        }
        while(left <= mid){
            result.add(nums[left]);
            left++;
        }
        while(right <= high){
            result.add(nums[right]);
            right++;
        }
        for(int i = low; i <= high; i++){
                nums[i] = result.get(i-low);
        }
    }

    void divide(int[] nums, int low, int high){
        if(low >= high){
            return;
        }
        int mid = low + (high-low)/2;
        divide(nums, low, mid);
        divide(nums, mid+1, high);
        conquer(nums, low, mid, high);
    }


    public int[] sortArray(int[] nums) {
        divide(nums, 0, nums.length-1);
        return nums;
    }
}






class Solution {
     public int[] InsertionSort(int[] nums){
        int n = nums.length;

        for(int i = 1; i < n; i++){
            int key = nums[i];
            int j = i - 1;

            while(j >= 0 && nums[j] > key){
                nums[j + 1] = nums[j];
                j = j - 1;
            }

            nums[j + 1] = key;
        }
        return nums;
     }
}
























// class Solution {
//     public int[] sortArray(int[] nums) {
//         // Arrays.sort(nums);
//         //return nums;
//         mergeSort(nums, 0, nums.length-1);
//         return nums;
//     }

//     void mergeSort(int nums[], int low, int high){
//         //Base Case
//         if(low >= high){
//             return ;
//         }
//         int mid = low + (high-low)/2;        
//         //Divide it (Tree recursion)
//         mergeSort(nums,low,mid); // Sort in left side
//         mergeSort(nums,mid+1,high); //Sort in right side

//         merge(nums, low, mid, high);
//     }

//     void merge(int[] nums , int low, int mid, int high){
//         List<Integer> result = new ArrayList<>();
//         int left = low;
//         int right = mid + 1;
//         while(left <= mid && right <= high){
//             if(nums[left] <= nums[right]){
//                 result.add(nums[left]);
//                 left++;
//             }
//             else{
//                 result.add(nums[right]);
//                 right++;
//             }
//             // handle the remaining values
//             while(left <= mid){
//                 result.add(nums[left]);
//                 left++;
//             }
//             while(right <= high){
//                 result.add(nums[right]);
//                 right++;
//             }
//             // copy the list (result) value into original array i.e nums
//             for(int i = low; i <= high; i++){
//                 nums[i] = result.get(i-low);
//             }
//         }
//     }
// }
